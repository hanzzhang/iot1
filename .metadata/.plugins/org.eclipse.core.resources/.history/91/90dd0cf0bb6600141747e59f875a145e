package storm.blueprints.chapter1.v1;

import java.io.BufferedReader;
import java.io.InputStreamReader;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FSDataOutputStream;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.SequenceFile;


public class WriteToBlob {

	public static void main(String[] args) throws Exception {
		// accessing HDFS file system
		FileSystem hdfs = FileSystem.get(new Configuration());
		Path homeDir = hdfs.getHomeDirectory();
		// Print the home directory
		System.out.println("Home folder -" + homeDir);
		// creating and deleting directory
		Path workingDir = hdfs.getWorkingDirectory();
		Path newFolderPath = new Path("/MyDataFolder");
		newFolderPath = Path.mergePaths(workingDir, newFolderPath);
		if (hdfs.exists(newFolderPath)) {
			hdfs.delete(newFolderPath, true); // Delete existing Directory
		}
		hdfs.mkdirs(newFolderPath); // Create new Directory
		// copying File from local file system to HDFS
		Path localFilePath = new Path("c://localdata/datafile1.txt");
		Path hdfsFilePath = new Path(newFolderPath + "/dataFile1.txt");
		hdfs.copyFromLocalFile(localFilePath, hdfsFilePath);
		// Copying File from HDFS to local file system
		localFilePath = new Path("c://hdfsdata/datafile1.txt");
		hdfs.copyToLocalFile(hdfsFilePath, localFilePath);
		// Creating a file in HDFS
		Path newFilePath = new Path(newFolderPath + "/newFile.txt");
		hdfs.createNewFile(newFilePath);
		// Writing data to a HDFS file
		StringBuilder sb = new StringBuilder();
		for (int i = 1; i <= 5; i++) {
			sb.append("Data");
			sb.append(i);
			sb.append("\n");
		}
		byte[] byt = sb.toString().getBytes();
		FSDataOutputStream fsOutStream = hdfs.create(newFilePath);
		fsOutStream.write(byt);
		fsOutStream.close();
		// Reading data From HDFS File
		BufferedReader bfr = new BufferedReader(new InputStreamReader(hdfs.open(newFilePath)));
		String str = null;
		while ((str = bfr.readLine()) != null) {
			System.out.println(str);
		}
		//
//		Configuration conf = new Configuration();
//		FileSystem fs = path.getFileSystem(conf);
//		SequenceFile.Writer inputWriter = new SequenceFile.Writer(fs, conf, path, LongWritable.class, MyWritable.class);
//		inputWriter.append(new LongWritable(uniqueId++), new MyWritable(data));
//		inputWriter.close();
		//
	}
}
